{"version":3,"file":"main.2656094b51cfe3dd724e.js","mappings":"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","sources":["webpack://lexicon/./node_modules/bootstrap/dist/css/bootstrap.min.css","webpack://lexicon/./src/styles.scss?940e","webpack://lexicon/./node_modules/css-loader/dist/runtime/api.js","webpack://lexicon/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://lexicon/webpack/bootstrap","webpack://lexicon/webpack/runtime/compat get default export","webpack://lexicon/webpack/runtime/define property getters","webpack://lexicon/webpack/runtime/hasOwnProperty shorthand","webpack://lexicon/./src/main.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/bootstrap/dist/css/bootstrap.min.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ``, \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import './styles.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    const canvas = document.getElementById('gameCanvas');\n    const context = canvas.getContext('2d');\n    canvas.style.cursor = 'pointer';\n    const gridSize = 12;\n    const cellSize = canvas.width / gridSize;\n    let firstClick = null;\n    let secondClick = null;\n    const highlightedCells = []; \n    const selectedCells = []; \n    let tempHighlightCells = []; \n    \n  \n    \n    const board = Array.from({ length: gridSize }, () => Array.from({ length: gridSize }, () => ''));\n    let words = ['rice', 'bread', 'milk', 'cheese', 'apple', 'banana', 'grape', 'olive', 'honey', 'salad', 'juice', 'lemon', 'carrot', 'onion', 'tomato', 'pasta', 'sushi', 'pizza', 'burger', 'fries'];\n\n  \n    \n    words = words.map(word => word.toUpperCase());\n  \n    \n    placeWords(board, words);\n    fillEmptySquares(board);\n    drawGrid();\n  \n    canvas.addEventListener('click', handleClick);\n  \n    function handleClick(event) {\n      if(isRunning){\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      const col = Math.floor(x / cellSize);\n      const row = Math.floor(y / cellSize);\n  \n      if (!firstClick) {\n        firstClick = { row, col };\n        highlightCell(firstClick);\n      } else {\n        clearCell(firstClick);\n        clearCell(secondClick)\n        secondClick = { row, col };\n        highlightCell(secondClick);\n        attemptSelection();\n      }\n    }\n    }\n  \n    function attemptSelection() {\n        if (!firstClick || !secondClick) return;\n      \n        const word = getWordFromSelection(firstClick, secondClick);\n      \n        if (words.includes(word)) {\n          highlightWord(firstClick, secondClick); \n      \n          \n          const foundWordItem = document.querySelector(`#clue-${word}`);\n          if (foundWordItem) {\n            foundWordItem.classList.add('found-word')\n            updatePoints(getPointsForAttempt());\n          }\n        } else {\n          temporaryHighlight(firstClick, secondClick);\n          if (points === 0){\n          }\n          else{\n          updatePoints(-1);\n        }\n        }\n      \n        clearCell(firstClick); \n        clearCell(secondClick);\n        firstClick = null;\n        secondClick = null;\n      \n        \n        if (checkWinCondition()) {\n          \n          stopTimer();\n          document.getElementById('timer').innerText = \"Hey, you did it!\"\n          updatePoints(getPointsForCompletion());\n          if (points == 120){\n            document.getElementById('timer').innerText = \"PERFECT SCORE!\"\n          }\n        }\n      }\n\n      function updatePoints(pointsToAdd) {\n        points += pointsToAdd;\n        document.getElementById('points').innerText = points;\n    }\n \n    function getWordFromSelection(start, end) {\n        let word = '';\n      \n        if (start.row === end.row) {\n          \n          const row = start.row;\n          const startCol = Math.min(start.col, end.col);\n          const endCol = Math.max(start.col, end.col);\n          for (let col = startCol; col <= endCol; col++) {\n            word += board[row][col];\n          }\n        } else if (start.col === end.col) {\n          \n          const col = start.col;\n          const startRow = Math.min(start.row, end.row);\n          const endRow = Math.max(start.row, end.row);\n          for (let row = startRow; row <= endRow; row++) {\n            word += board[row][col];\n          }\n        } else if (Math.abs(start.row - end.row) === Math.abs(start.col - end.col)) {\n          \n          const startRow = Math.min(start.row, end.row);\n          const endRow = Math.max(start.row, end.row);\n          const startCol = Math.min(start.col, end.col);\n          const endCol = Math.max(start.col, end.col);\n          for (let i = 0; i <= endRow - startRow; i++) {\n            if (start.row < end.row) {\n              word += board[startRow + i][startCol + i];\n            } else {\n              word += board[endRow - i][startCol + i];\n            }\n          }\n        }\n      \n        return word;\n      }\n  \n      function highlightWord(start, end) {\n        if (start.row === end.row) {\n          \n          const row = start.row;\n          const startCol = Math.min(start.col, end.col);\n          const endCol = Math.max(start.col, end.col);\n          for (let col = startCol; col <= endCol; col++) {\n            highlightedCells.push({ row, col });\n          }\n        } else if (start.col === end.col) {\n          \n          const col = start.col;\n          const startRow = Math.min(start.row, end.row);\n          const endRow = Math.max(start.row, end.row);\n          for (let row = startRow; row <= endRow; row++) {\n            highlightedCells.push({ row, col });\n          }\n        } else if (start.row - end.row === start.col - end.col) {\n          \n          const startRow = Math.min(start.row, end.row);\n          const endRow = Math.max(start.row, end.row);\n          const startCol = Math.min(start.col, end.col);\n          const endCol = Math.max(start.col, end.col);\n      \n          for (let row = startRow, col = startCol; row <= endRow && col <= endCol; row++, col++) {\n            highlightedCells.push({ row, col });\n          }\n        } else if (start.row - end.row === end.col - start.col) {\n          \n          const startRow = Math.max(start.row, end.row);\n          const endRow = Math.min(start.row, end.row);\n          const startCol = Math.min(start.col, end.col);\n          const endCol = Math.max(start.col, end.col);\n      \n          for (let row = startRow, col = startCol; row >= endRow && col <= endCol; row--, col++) {\n            highlightedCells.push({ row, col });\n          }\n        }\n      \n        drawGrid(); \n      }\n  \n    function highlightCell(cell) {\n      if (cell) {\n        selectedCells.push(cell);\n        drawGrid(); \n      }\n    }\n  \n    function temporaryHighlight(start, end) {\n      if (isRunning){\n        if (start.row === end.row) {\n          \n          const row = start.row;\n          const startCol = Math.min(start.col, end.col);\n          const endCol = Math.max(start.col, end.col);\n          for (let col = startCol; col <= endCol; col++) {\n            tempHighlightCells.push({ row, col });\n          }\n        } else if (start.col === end.col) {\n          \n          const col = start.col;\n          const startRow = Math.min(start.row, end.row);\n          const endRow = Math.max(start.row, end.row);\n          for (let row = startRow; row <= endRow; row++) {\n            tempHighlightCells.push({ row, col });\n          }\n        } else if (start.row - end.row === start.col - end.col) {\n          \n          const startRow = Math.min(start.row, end.row);\n          const endRow = Math.max(start.row, end.row);\n          const startCol = Math.min(start.col, end.col);\n          const endCol = Math.max(start.col, end.col);\n      \n          for (let row = startRow, col = startCol; row <= endRow && col <= endCol; row++, col++) {\n            tempHighlightCells.push({ row, col });\n          }\n        } else if (start.row - end.row === end.col - start.col) {\n          \n          const startRow = Math.max(start.row, end.row);\n          const endRow = Math.min(start.row, end.row);\n          const startCol = Math.min(start.col, end.col);\n          const endCol = Math.max(start.col, end.col);\n      \n          for (let row = startRow, col = startCol; row >= endRow && col <= endCol; row--, col++) {\n            tempHighlightCells.push({ row, col });\n          }\n        }\n      }\n      \n        drawGrid(); \n      \n        \n        setTimeout(() => {\n          tempHighlightCells = [];\n          drawGrid(); \n        }, 500);\n      }\n  \n    function placeWords(board, words) {\n      const gridSize = board.length;\n      const wordList = [...words];\n      wordList.sort((a, b) => b.length - a.length);\n  \n      function canPlaceWordHorizontally(word, row, col) {\n        if (col + word.length > gridSize) return false;\n        for (let i = 0; i < word.length; i++) {\n          const cell = board[row][col + i];\n          if (cell !== '' && cell !== word[i]) {\n            return false;\n          }\n        }\n        return true;\n      }\n  \n      function placeWordHorizontally(word, row, col) {\n        for (let i = 0; i < word.length; i++) {\n          board[row][col + i] = word[i];\n        }\n      }\n  \n      function canPlaceWordVertically(word, row, col) {\n        if (row + word.length > gridSize) return false;\n        for (let i = 0; i < word.length; i++) {\n          const cell = board[row + i][col];\n          if (cell !== '' && cell !== word[i]) {\n            return false;\n          }\n        }\n        return true;\n      }\n  \n      function placeWordVertically(word, row, col) {\n        for (let i = 0; i < word.length; i++) {\n          board[row + i][col] = word[i];\n        }\n      }\n  \n      function canPlaceWordDiagonally(word, row, col) {\n        if (row - word.length < -1 || col + word.length > gridSize) return false;\n        for (let i = 0; i < word.length; i++) {\n          const cell = board[row - i][col + i];\n          if (cell !== '' && cell !== word[i]) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      function canPlaceWordDiagonallyDown(word, row, col) {\n        \n        if (row + word.length > gridSize || col + word.length > gridSize) return false;\n      \n        \n        for (let i = 0; i < word.length; i++) {\n          const cell = board[row + i][col + i];\n          if (cell !== '' && cell !== word[i]) {\n            return false;\n          }\n        }\n        return true;\n      }\n      \n      function placeWordDiagonally(word, row, col) {\n        for (let i = 0; i < word.length; i++) {\n          board[row - i][col + i] = word[i];\n        }\n      }\n\n      function placeWordDiagonallyDown(word, row, col) {\n        for (let i = 0; i < word.length; i++) {\n          board[row + i][col + i] = word[i];\n        }\n      }\n  \n      for (let word of wordList) {\n        let placed = false;\n        let attempts = 0;\n        const maxAttempts = 10;\n      \n        while (!placed && attempts < maxAttempts) {\n          const row = Math.floor(Math.random() * gridSize);\n          const col = Math.floor(Math.random() * gridSize);\n          const direction = Math.random();\n      \n          if (direction < 0.33) {\n            if (canPlaceWordHorizontally(word, row, col)) {\n              placeWordHorizontally(word, row, col);\n              placed = true;\n            }\n          } else if (direction < 0.66) {\n            if (canPlaceWordVertically(word, row, col)) {\n              placeWordVertically(word, row, col);\n              placed = true;\n            }\n          } else {\n            if (canPlaceWordDiagonallyDown(word, row, col)) {\n              placeWordDiagonallyDown(word, row, col);\n              placed = true;\n            } else if (canPlaceWordDiagonally(word, row, col)) {\n              placeWordDiagonally(word, row, col);\n              placed = true;\n            }\n          }\n      \n          attempts++;\n          if (attempts === 10) {\n            window.location.reload\n          }\n        }\n      \n      }\n    }\n  \n    function fillEmptySquares(board) {\n      const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      for (let row = 0; row < gridSize; row++) {\n        for (let col = 0; col < gridSize; col++) {\n          if (board[row][col] === '') {\n            const randomLetter = alphabet[Math.floor(Math.random() * alphabet.length)];\n            board[row][col] = randomLetter;\n          }\n        }\n      }\n    }\n  \n    function drawGrid() {\n      context.clearRect(0, 0, canvas.width, canvas.height); \n      context.strokeStyle = '#fff';\n      context.fillStyle = '#fff'; \n      context.fillRect(0, 0, canvas.width, canvas.height); \n      context.font = 'bold 20px Arial';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      \n      context.fillStyle = 'rgba(0, 255, 0, 0.25)'; \n      for (const { row, col } of highlightedCells) {\n        context.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);\n      }\n  \n      \n      context.fillStyle = 'rgba(255, 0, 0, 1)'; \n      for (const { row, col } of tempHighlightCells) {\n        context.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);\n      }\n  \n      \n      context.fillStyle = 'rgba(0, 255, 0, 0.5)'; \n      for (const { row, col } of selectedCells) {\n        context.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);\n      }\n \n      \n      for (let row = 0; row < gridSize; row++) {\n        for (let col = 0; col < gridSize; col++) {\n          const letter = board[row][col];\n          const x = col * cellSize + cellSize / 2;\n          const y = row * cellSize + cellSize / 2;\n  \n          context.fillStyle = '#000'; \n          context.fillText(letter, x, y);\n        }\n      }\n  \n      \n      for (let i = 0; i <= gridSize; i++) {\n        \n        context.beginPath();\n        context.moveTo(i * cellSize, 0);\n        context.lineTo(i * cellSize, canvas.height);\n        context.stroke();\n  \n        \n        context.beginPath();\n        context.moveTo(0, i * cellSize);\n        context.lineTo(canvas.width, i * cellSize);\n        context.stroke();\n      }\n    }\n    function clearCell(cell) {\n        const index = selectedCells.findIndex(c => c.row === cell.row && c.col === cell.col);\n        if (index !== -1) {\n          selectedCells.splice(index, 1);\n          drawGrid(); \n        }\n      }\n\n      canvas.addEventListener('mousemove', handleMouseMove);\ncanvas.addEventListener('mouseleave', handleMouseLeave);\n\n\nfunction handleMouseMove(event) {\n  if(isRunning){\n  const rect = canvas.getBoundingClientRect();\n  const mouseX = event.clientX - rect.left;\n  const mouseY = event.clientY - rect.top;\n\n  const cellSize = canvas.width / gridSize;\n\n  \n  const row = Math.floor(mouseY / cellSize);\n  const col = Math.floor(mouseX / cellSize);\n\n  \n  clearCanvas();\n  drawGrid();\n\n  \n  context.fillStyle = 'rgba(0, 255, 0, 0.15)';\n  context.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);\n}\n}\n\n\nfunction handleMouseLeave() {\n  \n  clearCanvas();\n  drawGrid();\n}\n\nfunction clearCanvas() {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n\n  \n  function renderWordList() {\n    const wordListContainer = document.getElementById('wordList');\n    wordListContainer.innerHTML = ''; \n  \n    \n    const row = document.createElement('div');\n    row.classList.add('row');\n    wordListContainer.appendChild(row);\n  \n    \n    const numColumns = Math.min(4, Math.ceil(words.length / 4));\n  \n    \n    const wordsPerColumn = Math.ceil(words.length / numColumns);\n  \n    \n    for (let i = 0; i < numColumns; i++) {\n      \n      const col = document.createElement('div');\n      col.classList.add('col-md');\n      row.appendChild(col);\n  \n      \n      for (let j = i * wordsPerColumn; j < (i + 1) * wordsPerColumn && j < words.length; j++) {\n        const word = words[j];\n        const listItem = document.createElement('a');\n        listItem.href = '#';\n        listItem.id = `clue-${word}`\n        listItem.classList.add('list-group-item', 'list-group-item-action');\n        listItem.textContent = word;\n        listItem.style.border = \"none\"\n        listItem.style.padding=\"0px\"\n        listItem.style.margin=\"0px\"\n\n        col.appendChild(listItem);\n      }\n    }\n  }\n  renderWordList();\n     \n  \n  function checkWinCondition() {\n    \n    for (const word of words) {\n      \n      const foundWordItem = document.querySelector(`#clue-${word}`);\n      \n      \n      if (!foundWordItem || !foundWordItem.classList.contains('found-word')) {\n        return false;\n      }\n    }\n    \n    \n    clearInterval(timer);\n    return true;\n  }\n\n\n  let timer;\n  let seconds = 0;\n  let minutes = 0;\n  let isRunning = false;\n  let points = 0;\n\n  function updateTimer() {\n      seconds++;\n      if (seconds === 60) {\n          seconds = 0;\n          minutes++;\n      }\n  \n      let formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;\n      let formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\n  \n      document.getElementById('timer').innerText = `${formattedMinutes}:${formattedSeconds}`;\n  }\n  \n  function startTimer() {\n      timer = setInterval(updateTimer, 1000);\n  }\n  \n  function stopTimer() {\n      clearInterval(timer);\n  }\n  \n  function toggleGame() {\n      const startButton = document.getElementById('startButton');\n      \n      if (isRunning) {\n          stopTimer();\n          startButton.innerText = 'Start Game';\n          startButton.classList.remove('btn-danger');\n          startButton.classList.add('btn-success');\n      } else {\n          startTimer();\n          startButton.innerText = 'Stop Game';\n          startButton.classList.remove('btn-success');\n          startButton.classList.add('btn-danger');\n      }\n      \n      isRunning = !isRunning;\n  }\n  \n  function checkWinCondition() {\n      \n      for (const word of words) {\n          \n          const foundWordItem = document.querySelector(`#clue-${word}`);\n          \n          \n          if (!foundWordItem || !foundWordItem.classList.contains('found-word')) {\n              return false;\n          }\n      }\n      \n      \n      clearInterval(timer);\n      return true;\n  }\n  \n  document.getElementById('startButton').addEventListener('click', toggleGame);\n\n  function getPointsForAttempt() {\n    if (minutes < 1) return 5;\n    if (minutes < 2) return 4;\n    if (minutes < 3) return 3;\n    if (minutes < 4) return 2;\n    return 1;\n}\n\nfunction getPointsForCompletion() {\n    if (minutes < 1) return 20;\n    if (minutes < 2) return 15;\n    if (minutes < 3) return 10;\n    if (minutes < 4) return 5;\n    return 0;\n}\n\nfunction updatePoints(pointsToAdd) {\n    points += pointsToAdd;\n    document.getElementById('points').innerText = points;\n}\n\n  });\n    "],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","document","addEventListener","canvas","getElementById","context","getContext","style","cursor","timer","gridSize","cellSize","width","firstClick","secondClick","highlightedCells","selectedCells","tempHighlightCells","board","Array","from","words","updatePoints","pointsToAdd","points","innerText","highlightCell","cell","drawGrid","clearRect","height","strokeStyle","fillStyle","fillRect","font","textAlign","textBaseline","_step2","_iterator2","_createForOfIteratorHelper","s","done","_step2$value","value","row","col","err","e","f","_step3","_iterator3","_step3$value","_step4","_iterator4","_step4$value","letter","x","y","fillText","beginPath","moveTo","lineTo","stroke","clearCell","index","findIndex","c","splice","clearCanvas","checkWinCondition","_step5","_iterator5","word","foundWordItem","querySelector","classList","contains","clearInterval","toUpperCase","wordList","_toConsumableArray","canPlaceWordHorizontally","placeWordHorizontally","canPlaceWordVertically","placeWordVertically","canPlaceWordDiagonally","canPlaceWordDiagonallyDown","placeWordDiagonally","placeWordDiagonallyDown","sort","b","_step","_iterator","placed","attempts","Math","floor","random","direction","window","location","reload","placeWords","alphabet","randomLetter","fillEmptySquares","event","isRunning","rect","getBoundingClientRect","clientX","left","clientY","top","start","end","startCol","min","endCol","max","startRow","endRow","abs","getWordFromSelection","includes","highlightWord","add","minutes","setTimeout","temporaryHighlight","stopTimer","attemptSelection","mouseX","mouseY","wordListContainer","innerHTML","createElement","appendChild","numColumns","ceil","wordsPerColumn","j","listItem","href","textContent","border","padding","margin","renderWordList","seconds","updateTimer","formattedSeconds","formattedMinutes","_step6","_iterator6","startButton","remove","setInterval"],"sourceRoot":""}